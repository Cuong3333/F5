import React, { useState, useEffect } from 'react';
import { GrSend } from "react-icons/gr";
import { FaMicrophone } from "react-icons/fa";
import './Listing.css';

const Listing = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [messages, setMessages] = useState([]);
  const [mediaRecorder, setMediaRecorder] = useState(null);
  const [audioChunks, setAudioChunks] = useState([]);
  const [transcript, setTranscript] = useState(""); // VƒÉn b·∫£n nh·∫≠n d·∫°ng t·ª´ gi·ªçng n√≥i

    // H√†m c·∫≠p nh·∫≠t transcript khi ng∆∞·ªùi d√πng g√µ v√†o textarea
  const handleInputChange = (event) => {
    setTranscript(event.target.value);
  };
  // H√†m ƒë·ªÉ b·∫Øt ƒë·∫ßu ho·∫∑c d·ª´ng ghi √¢m v√† nh·∫≠n di·ªán gi·ªçng n√≥i
  const toggleRecording = () => {
    if (isRecording) {
      stopRecording();
    } else {
      startRecording();
    }
  };

  const startRecording = () => {
    // B·∫Øt ƒë·∫ßu ghi √¢m v·ªõi Web Speech API
    if ('webkitSpeechRecognition' in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.lang = "vi-VN"; // Ng√¥n ng·ªØ Ti·∫øng Vi·ªát

      recognition.onstart = () => {
        setIsRecording(true);
      };

      recognition.onresult = (event) => {
        const speechToText = event.results[0][0].transcript;
        setTranscript(speechToText); // C·∫≠p nh·∫≠t vƒÉn b·∫£n v√†o transcript
        document.getElementById("user_input").value = speechToText; // Hi·ªÉn th·ªã trong textarea
      };

      recognition.onerror = (event) => {
        console.error("Speech recognition error", event);
        setIsRecording(false);
      };

      recognition.onend = () => {
        setIsRecording(false);
      };

      recognition.start();
    } else {
      console.warn("Web Speech API is not supported by this browser.");
    }
  };

  const stopRecording = () => {
    if (mediaRecorder) {
      mediaRecorder.stop();
      setIsRecording(false);
    }
  };

  // H√†m g·ª≠i tin nh·∫Øn vƒÉn b·∫£n
  const sendMessage = async () => {
    const messageInput = document.getElementById("user_input").value;

    if (messageInput.trim() !== "") {
      // Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
      setMessages([...messages, { sender: "user", text: messageInput }]);

      try {
        // G·ª≠i y√™u c·∫ßu t·ªõi backend ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi
        const response = await fetch("http://localhost:8000/chat", {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: new URLSearchParams({ user_input: messageInput })
        });

        const data = await response.json();

        // Hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ chatbot
        if (data.response) {
          setMessages(prevMessages => [
            ...prevMessages,
            { sender: "bot", text: data.response }
          ]);
        }

        // Ph√°t √¢m thanh n·∫øu c√≥
        if (data.audio_url) {
          const audio = new Audio(data.audio_url);
          audio.play().catch(error => console.error("Error playing audio:", error));
          
          // Hi·ªÉn th·ªã tr√¨nh ph√°t √¢m thanh trong giao di·ªán
          const audioElement = (
            <audio controls src={data.audio_url} style={{ marginTop: '10px' }}>
              Your browser does not support the audio element.
            </audio>
          );
          setMessages(prevMessages => [
            ...prevMessages,
            { sender: "bot", text: "Bot sent an audio response:", audio: audioElement }
          ]);
        }
      } catch (error) {
        console.error("Error sending message:", error);
      }

      // X√≥a n·ªôi dung √¥ nh·∫≠p sau khi g·ª≠i
      document.getElementById("user_input").value = "";
      setTranscript("");
    }
  };

  return (
    <div className="listingSection show-chatbot">
      <div className="chatbot">
        <header>
          <h2>Chatbot</h2>
        </header>
        
        <div className="chat-box" id="chat-box">
          {messages.map((msg, idx) => (
            <div key={idx} className={`chat-message ${msg.sender}`}>
              {msg.text}
              {msg.audio && msg.audio}  {/* Hi·ªÉn th·ªã ph·∫ßn t·ª≠ audio n·∫øu c√≥ */}
            </div>
          ))}
        </div>
        
        <div className="chat-input">
          <textarea
            id="user_input"
            placeholder="Enter a message..."
            required
            value={transcript}
            onChange={handleInputChange} // Cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p li·ªáu
          ></textarea>
          <button onClick={toggleRecording} className="voice-button">
            {isRecording ? 'üî¥ Recording...' : <FaMicrophone size={20} />}
          </button>
          <button onClick={sendMessage}>
            <GrSend className="icon iconSend" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default Listing;
